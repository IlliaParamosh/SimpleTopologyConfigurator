using SimpleTopologyConfigurator;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Printing;

public class DijkstrasAlgorithm
{
    public int [] dijkstra(int[,] matrix, int origin, int endPoint)
    {
        List<int> list = new List<int>();
        int[,] result = dijkstraAlgorithm(matrix, origin);

        int current = endPoint;
        //int nextToFind = Int32.MaxValue;
        while (current != origin)
        {
            list.Add(current);
            current = result[current, 2];
        }
        list.Add(origin);

        return list.ToArray();
    }

    //code generated by ChatGPT. Performs dijkstra algorithm
    private int[,] dijkstraAlgorithm(int[,] matrix, int origin)
    {
        int n = matrix.GetLength(0); // number of vertices

        int[,] result = new int[n, 3];  //vertex,distance,previous

        int[] distance = new int[n]; // distance array to store shortest distances
        int[] previous = new int[n]; // previous array to store previous vertices
        bool[] visited = new bool[n]; // visited array to keep track of visited vertices

        for (int i = 0; i < n; i++)
        {
            distance[i] = int.MaxValue; // initialize distance array with large values
            previous[i] = -1; // initialize previous array with -1
            visited[i] = false; // initialize visited array with false
        }

        distance[origin] = 0; // set distance of origin vertex to 0

        for (int count = 0; count < n - 1; count++)
        {
            // Find the vertex with the smallest distance that hasn't been visited yet
            int minDistance = int.MaxValue;
            int minVertex = -1;
            for (int v = 0; v < n; v++)
            {
                if (!visited[v] && distance[v] < minDistance)
                {
                    minDistance = distance[v];
                    minVertex = v;
                }
            }

            visited[minVertex] = true; // Mark the current vertex as visited

            // Update the distance of adjacent vertices
            for (int v = 0; v < n; v++)
            {
                if (!visited[v] && matrix[minVertex, v] != 0 && distance[minVertex] != int.MaxValue &&
                    distance[minVertex] + matrix[minVertex, v] < distance[v])
                {
                    distance[v] = distance[minVertex] + matrix[minVertex, v];
                    previous[v] = minVertex;
                }
            }
        }

        //fill result
        for (int i = 0; i < n; i++)
        {
            result[i, 0] = i;
            result[i, 1] = distance[i];
            result[i, 2] = previous[i];
        }
        return result;
    }
}
